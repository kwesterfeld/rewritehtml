<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Rewrite HTML Example</display-name>

  <!-- NOTE: this filter and it's associated mapping should *NOT* be mapped to 
             a constant as this is used for an actual application.
             
             The RemoteUserExpressionFilter supplies a remote user name in the filter chain 
             so that testing the ProxyServlet with remote-user-header facility is easier,
             and can evaluate session variables and other data.
             
             Another example: session.USERNAME
             
             would lookup "USERNAME" within the http session.
             
             Two context values are provided, "request" and "session" (if created),
             and expression is evaluated via MVEL (see here: http://mvel.codehaus.org) 
             
   -->
  <filter>
     <filter-name>RemoteUserExpressionFilter</filter-name>
     <filter-class>com.kawsoft.rewritehtml.remoteuser.RemoteUserExpressionFilter</filter-class>
     <init-param>
         <param-name>remote-user-expression</param-name>
         <param-value>&quot;bruno&quot;</param-value>
     </init-param>
  </filter>

  <!-- NOTE: the HtmlTranslationFilter provides html and other arbitrary content rewriting.
             This is helpful in updating href=, src= and other hardcoded host references
             when creating a reverse proxy.
             
             The main configuration setting is filter-xml, which refers to a resource
             URI either in the webapp itself, classpath, or URL.
   -->
  <filter>
     <filter-name>HtmlTranslationFilter</filter-name>
     <filter-class>com.kawsoft.rewritehtml.HtmlTranslationFilter</filter-class>
     <init-param>
         <param-name>filter-xml</param-name>
         <param-value>/WEB-INF/filters.xml</param-value>
     </init-param>
  </filter>
  
  <filter-mapping>
     <filter-name>RemoteUserExpressionFilter</filter-name>
     <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
     <filter-name>HtmlTranslationFilter</filter-name>
     <url-pattern>/rportal/*</url-pattern>
  </filter-mapping>

  <!-- NOTE: the ProxyServlet is used to host access to a back-end application.  In this case, 
             we are proxying to a liferay instance, which has been setup to accept an
             http header for single-signon.
             
             The associated portal-ext.properties change to enable this feature is:
             
             	auto.login.hooks=com.liferay.portal.security.auth.RequestHeaderAutoLogin
             	
             This auto login module expects a header named LIFERAY_SCREEN_NAME, which we
             map to remote user name for the currently logged in application.  
   -->
  <servlet>
  	<servlet-name>ProxyServlet-liferay</servlet-name>
  	<servlet-class>com.woonoz.proxy.servlet.ProxyServlet</servlet-class>
  	<init-param>
  		<param-name>target-url</param-name>
  		<param-value>http://localhost:8080/rportal</param-value>
  	</init-param>
  	<init-param>
  		<param-name>remote-user-header</param-name>
  		<param-value>LIFERAY_SCREEN_NAME</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet>
  	<servlet-name>ProxyServlet-liferay-chat-portlet</servlet-name>
  	<servlet-class>com.woonoz.proxy.servlet.ProxyServlet</servlet-class>
  	<init-param>
  		<param-name>target-url</param-name>
  		<param-value>http://localhost:8080/chat-portlet</param-value>
  	</init-param>
  	<init-param>
  		<param-name>remote-user-header</param-name>
  		<param-value>LIFERAY_SCREEN_NAME</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>ProxyServlet-liferay</servlet-name>
    <url-pattern>/rportal/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>ProxyServlet-liferay-chat-portlet</servlet-name>
    <url-pattern>/chat-portlet/*</url-pattern>
  </servlet-mapping>
 
</web-app>
